def solution(A, B):
    limit = len(A)                  # The possible largest N rungs
    result = [0] * len(A)           # The result for each query
    B = [(1<<item)-1 for item in B] # Pre-compute B for optimization
 
    # Compute the Fibonacci numbers for later use
    fib = [0] * (limit+2)
    fib[1] = 1
    for i in xrange(2, limit + 2):
        fib[i] = fib[i - 1] + fib[i - 2]
 
    for i in xrange(limit):
        # To climb to A[i] rungs, you could either
        # come from A[i]-1 with an one-step jump
        # OR come from A[i]-2 with a two-step jump
        # So from A[i] rungs, the number of different ways of climbing
        # to the top of the ladder is the Fibonacci number at position
        # A[i] + 1
        result[i] = fib[A[i]+1] & B[i]
 
    return result
    
    

#include <cassert>
#include <cmath>
#include <limits>
#include <vector>
using namespace std;
vector<int> solution(vector<int> &A, vector<int> &B) {
    const int L = 30000;
    const int M = 30;
    unsigned int divisor = 1ULL << 30;
    int len1 = A.size();
    int len2 = B.size();
    assert(len1 > 0 && len1 == len2);
    vector<int> memo(L + 1);
    vector<int> result(len1);
    memo[0] = 1;
    memo[1] = 1;
    for (int i = 2; i <= L; ++i)
    {
        assert(memo[i - 2] <= numeric_limits<int>::max() - memo[i - 1]);
        memo[i] = (memo[i - 2] + memo[i - 1]) % divisor;
        
    }
    for (int i = 0; i < len1; ++i)
    {
        assert(B[i] > 0 && B[i] <= M);
        assert(A[i] > 0 && A[i] <= L);
        result[i] = memo[A[i]] % (1 << B[i]);
    }
    return result;
}
